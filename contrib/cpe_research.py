from typing import Any

import apsw
import orjson
from rich.console import Console
from rich.live import Live
from rich.table import Table

from vdb.lib import KNOWN_PKG_TYPES, db6, CPE_FULL_REGEX
from vdb.lib.cve_model import CVE, CVE1

console = Console(markup=False, highlight=False, emoji=False)

purl_proposal_cache = {}

def get_cve_data(db_conn, index_hits: list[dict, Any]):
    """Get CVE data for the index results

    Args:
        db_conn: DB Connection or None to create a new one
        index_hits: Hits from one of the search methods
        search_str: Original search string used

    Returns:
        generator: generator for CVE data with original source data as a pydantic model
    """
    if not db_conn:
        db_conn, _ = db6.get(read_only=True)
    for ahit in index_hits:
        results: apsw.Cursor = db_conn.execute(
            "SELECT distinct json_object('source', source_data) FROM cve_data WHERE cve_id = ? AND type = ? ORDER BY cve_id DESC;",
            (ahit[0], ahit[1]),
        )
        for res in results:
            yield {
                "purl_prefix": ahit[-1],
                "source_data": (
                    CVE(
                        root=CVE1.model_validate(
                            orjson.loads(res[0])["source"], strict=False
                        )
                    )
                    if res[0]
                    else None
                ),
            }


def propose_pseudo_purls() -> list:
    """Get a list of namespaces without a precise purl prefix and propose a pseudo purls"""
    db_conn, index_conn = db6.get(read_only=True)
    ptypes = KNOWN_PKG_TYPES
    # These vendors are causing noise and slow-downs
    ptypes.extend(
        [
            "oracle",
            "microsoft",
            "adobe",
            "f5",
            "dell",
            "cisco",
            "symantec",
            "gigabyte",
            "mozilla",
            "wireshark",
            "schneider-electric",
            "ibm",
            "fujitsu",
            "apple",
            "netapp",
            "synology",
            "citrix",
        ]
    )
    raw_hits = index_conn.execute(
        f"""select distinct cve_id, type, namespace, name, purl_prefix from cve_index where type not in ({', '.join([f"'{p}'" for p in ptypes])})"""
    )
    table = Table(title="Results", highlight=False, show_lines=True)
    table.add_column("PURL prefix")
    table.add_column("CPEs")
    table.add_column("References")
    with Live(
        table, console=console, refresh_per_second=4, vertical_overflow="visible"
    ):
        for ahit in raw_hits:
            data_list_gen = get_cve_data(db_conn, [ahit])
            for data_list in data_list_gen:
                source_data: CVE1 = data_list["source_data"].root
                if not source_data.containers.cna.references:
                    continue
                references = source_data.containers.cna.references.root
                ref_urls = [
                    str(a.url.root).lower()
                    for a in references
                    if "git" in str(a.url.root).lower()
                ]
                if not ref_urls:
                    continue
                purl_prefix = data_list["purl_prefix"]
                affected = source_data.containers.cna.affected.root
                cpes = ["\n".join([b.root for b in a.cpes]) for a in affected]
                generic_cpes = [
                    acpe for acpe in cpes if acpe.startswith("cpe:2.3:a:generic")
                ]
                proposed_purls = []
                for generic_cpe in generic_cpes:
                    all_parts = CPE_FULL_REGEX.match(generic_cpe)
                    proposed_purl = f"pkg:generic/{all_parts.group('package')}"
                    version = all_parts.group("version")
                    if version and version != "*":
                        proposed_purl = f"{proposed_purl}@{version}"
                    proposed_purls.append(proposed_purl)
                if proposed_purls:
                    purl_proposal_cache[purl_prefix] = proposed_purls
                elif purl_proposal_cache.get(purl_prefix):
                    proposed_purls = purl_proposal_cache[purl_prefix]
                table.add_row(
                    purl_prefix + "\n" + "\n".join(proposed_purls),
                    cpes[0],
                    "\n".join(ref_urls),
                )


if __name__ == "__main__":
    propose_pseudo_purls()
