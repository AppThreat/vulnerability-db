import os
import sqlite3
import sys

from vdb.lib import config

db_conn: sqlite3.Connection = None
index_conn: sqlite3.Connection = None
tables_created = False
db_file_sep = "///" if sys.platform == "win32" else "//"


def ensure_schemas(db_conn: sqlite3.Connection, index_conn: sqlite3.Connection):
    """Create the sqlite tables and indexes in case they don't exist"""
    db_conn.execute(
        "CREATE TABLE if not exists cve_data(cve_id TEXT NOT NULL, type TEXT NOT NULL, namespace TEXT, name TEXT NOT NULL, source_data JSON NOT NULL, override_data JSON);")
    db_conn.executescript("""PRAGMA synchronous = OFF;
    PRAGMA journal_mode = MEMORY;
    """)
    db_conn.commit()
    index_conn.execute(
        "CREATE TABLE if not exists cve_index(cve_id TEXT NOT NULL, type TEXT NOT NULL, namespace TEXT, name TEXT NOT NULL, vers TEXT NOT NULL);")
    index_conn.executescript("""PRAGMA synchronous = OFF;
        PRAGMA journal_mode = MEMORY;
        """)
    index_conn.commit()


def get(db_file: str = config.VDB_BIN_FILE, index_file: str = config.VDB_BIN_INDEX, read_only=False) -> (
        sqlite3.Connection, sqlite3.Connection):
    global db_conn, index_conn, tables_created
    if not db_file.startswith("file:"):
        db_file = f"file:{db_file_sep}{os.path.abspath(db_file)}"
    if not index_file.startswith("file:"):
        index_file = f"file:{db_file_sep}{os.path.abspath(index_file)}"
    if read_only:
        db_file = f"{db_file}?mode=ro"
        index_file = f"{index_file}?mode=ro"
    if not db_conn:
        db_conn = sqlite3.connect(db_file, uri=True)
    if not index_conn:
        index_conn = sqlite3.connect(index_file, uri=True)
    if not tables_created:
        ensure_schemas(db_conn, index_conn)
        tables_created = True
    return db_conn, index_conn


def stats():
    global db_conn, index_conn
    cve_data_count = 0
    res = db_conn.execute("SELECT count(*) FROM cve_data").fetchone()
    if res:
        cve_data_count = res[0]
    cve_index_count = 0
    res = index_conn.execute("SELECT count(*) FROM cve_index").fetchone()
    if res:
        cve_index_count = res[0]
    return cve_data_count, cve_index_count


def clear_all():
    if db_conn:
        db_conn.execute("DELETE FROM cve_data;")
        db_conn.commit()
    if index_conn:
        index_conn.execute("DELETE FROM cve_index;")
        index_conn.commit()


def optimize_and_close_all():
    """
    Safely close the connections by creating indexes and vacuuming if needed.
    """
    if db_conn:
        db_conn.execute(
            "CREATE INDEX if not exists idx1 on cve_data(cve_id, type);")
        db_conn.execute("VACUUM;")
        db_conn.commit()
        db_conn.close()
    if index_conn:
        index_conn.execute(
            "CREATE INDEX if not exists cidx1 on cve_index(cve_id);")
        index_conn.execute(
            "CREATE INDEX if not exists cidx2 on cve_index(type, namespace, name);")
        index_conn.execute(
            "CREATE INDEX if not exists cidx3 on cve_index(type, name);")
        index_conn.execute(
            "CREATE INDEX if not exists cidx4 on cve_index(namespace, name);")
        index_conn.execute("VACUUM;")
        index_conn.commit()
        index_conn.close()
